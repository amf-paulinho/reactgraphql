{"version":3,"sources":["logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","reportWebVitals.js","index.js"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","launches","map","LAUNCH_QUERY","Launch","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","cache","InMemoryCache","App","src","logo","alt","style","width","display","margin","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83730a5d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.91169fa6.png\";","import React from 'react';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nexport default function LaunchItem({\n    launch: { flight_number, mission_name, launch_date_local, launch_success }\n}) {\n    return (\n        <div className=\"card card-body mb-3\">\n            <div className=\"row\">\n                <div className=\"col-md-9\">\n                    <h4>\n                        Mission:{' '}\n                        <span\n                            className={classNames({\n                                'text-success': launch_success,\n                                'text-danger': !launch_success\n                            })}\n                        >\n                            {mission_name}\n                        </span>\n                    </h4>\n                    <p>\n                        Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment>\n                    </p>\n                </div>\n                <div className=\"col-md-3\">\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\n                        Launch Details\n          </Link>\n                </div>\n            </div>\n        </div>\n    );\n}\n","\nimport React from 'react';\n\nexport default function MissionKey() {\n    return (\n        <div className=\"my-3\">\n            <p>\n                <span className=\"px-3 mr-2 bg-success\" /> = Success\n      </p>\n            <p>\n                <span className=\"px-3 mr-2 bg-danger\" /> = Fail\n      </p>\n        </div>\n    );\n}","import React, { Component, Fragment } from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nexport default function Launches() {\n    const { loading, error, data } = useQuery(LAUNCHES_QUERY);\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n    return (\n        <Fragment>\n            <h1 className=\"display-4 my-3\">Launches</h1>\n            <MissionKey />\n            <Fragment>\n                {data.launches.map(launch => (\n                    <LaunchItem key={launch.flight_number} launch={launch} />\n                ))}\n            </Fragment>\n        </Fragment>\n    );\n}","import React, { Component, Fragment } from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\n\n\nexport default function Launch(props) {\n    let { flight_number } = props.match.params;\n    flight_number = parseInt(flight_number);\n\n    const { loading, error, data } = useQuery(LAUNCH_QUERY, {\n        variables: { flight_number },\n    });\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n    const {\n        mission_name,\n        //flight_number,\n        launch_year,\n        launch_success,\n        rocket: { rocket_id, rocket_name, rocket_type }\n    } = data.launch;\n\n    return (\n        <Fragment>\n            <div>\n                <h1 className=\"display-4 my-3\">\n                    <span className=\"text-dark\">Mission:</span> {mission_name}\n                </h1>\n                <h4 className=\"mb-3\">Launch Details</h4>\n                <ul className=\"list-group\">\n                    <li className=\"list-group-item\">\n                        Flight Number: {flight_number}\n                    </li>\n                    <li className=\"list-group-item\">\n                        Launch Year: {launch_year}\n                    </li>\n                    <li className=\"list-group-item\">\n                        Launch Successful:{' '}\n                        <span\n                            className={classNames({\n                                'text-success': launch_success,\n                                'text-danger': !launch_success\n                            })}\n                        >\n                            {launch_success ? 'Yes' : 'No'}\n                        </span>\n                    </li>\n                </ul>\n\n                <h4 className=\"my-3\">Rocket Details</h4>\n                <ul className=\"list-group\">\n                    <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                    <li className=\"list-group-item\">\n                        Rocket Name: {rocket_name}\n                    </li>\n                    <li className=\"list-group-item\">\n                        Rocket Type: {rocket_type}\n                    </li>\n                </ul>\n                <hr />\n                <Link to=\"/\" className=\"btn btn-secondary\">\n                    Back\n                </Link>\n            </div>\n        </Fragment>\n    );\n}","\nimport './App.css';\nimport logo from './logo.png';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\n\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache()\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n\n          <img src={logo}\n            alt='SpaceX'\n            style={{ width: 300, display: 'block', margin: 'auto' }} />\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}